{"mappings":"AAAA,MAAMA,EAAOC,SAASC,cAAc,SAmB9BC,EAAgB,CAACC,EAAUC,IACxB,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,IAGbL,EAAKY,iBAAiB,UA7BDC,IACnBA,EAAEC,iBACF,MAAQT,MAAAU,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAEK,OAAOC,SACzC,IAAIC,EAAWC,OAAON,EAAMO,OAE5B,IAAK,IAAIC,EAAI,EAAGA,GAAKN,EAAOK,MAAOC,IACjCpB,EAAcoB,EAAGH,GACdI,MAAK,EAACpB,SAAEA,EAAQC,MAAEA,KACjBoB,QAAQC,IAAI,uBAAqBtB,QAAiBC,SAAYsB,OAE/D,EAAOvB,WAAUC,WAASoB,QACzBC,IAAQ,sBAAKtB,QAA8BC,SAE/Ce,GAAYC,OAAOL,EAAKM,M","sources":["src/js/03-promises.js"],"sourcesContent":["const form = document.querySelector('.form');\n\nconst onFormSubmit = e => {\n  e.preventDefault();\n  const { delay, step, amount } = e.target.elements;\n  let interval = Number(delay.value);\n\n  for (let i = 1; i <= amount.value; i++) {\n    createPromise(i, interval)\n      .then(({ position, delay }) =>\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`)\n      )\n      .catch(({ position, delay }) =>\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`)\n      );\n    interval += Number(step.value);\n  }\n};\n\nconst createPromise = (position, delay) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n};\nform.addEventListener('submit', onFormSubmit);\n\n// const fetchUserFromServer = username => {\n//   return new Promise((resolve, reject) => {\n//     console.log(`Fetching data for ${username}`);\n\n//     setTimeout(() => {\n//       // Change value of isSuccess variable to simulate request status\n//       const isSuccess = true;\n\n//       if (isSuccess) {\n//         resolve(username);\n//       } else {\n//         reject('error');\n//       }\n//     }, 2000);\n//   });\n// };\n\n// fetchUserFromServer('Mango')\n//   .then(user => console.log(user))\n//   .catch(error => console.log(error));\n\n// const makePromise = (text, delay) => {\n//   return new Promise(resolve => {\n//     setTimeout(() => resolve(text), delay);\n//   });\n// };\n// const promiseA = makePromise('promiseA value', 10000);\n// const promiseB = makePromise('promiseB value', 3000);\n\n// Promise.race([promiseA, promiseB])\n//   .then(value => console.log(value))\n//   .catch(error => console.log(error));\n\n// const makeGreeting = name => {\n//   if (name === '' || name === undefined) {\n//     return Promise.reject('User have to have a name!');\n//   }\n//   return Promise.resolve(`Welcome, ${name}`);\n// };\n\n// makeGreeting('')\n//   .then(result => console.log(result))\n//   .catch(error => console.log(error));\n"],"names":["$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","e","preventDefault","delay1","step","amount","target","elements","interval","Number","value","i","then","console","log","catch"],"version":3,"file":"03-promises.670fcd6c.js.map"}